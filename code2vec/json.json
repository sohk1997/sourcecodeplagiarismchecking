[{"startLine":6,"endLine":14,"tree":{"type":"MethodDeclaration","startLine":6,"endLine":14,"childNodes":[{"type":"Modifier","startLine":6,"endLine":6,"childNodes":[]},{"type":"Modifier","startLine":6,"endLine":6,"childNodes":[]},{"type":"SimpleName","startLine":6,"endLine":6,"childNodes":[]},{"type":"Parameter","startLine":6,"endLine":6,"childNodes":[{"type":"ArrayType","startLine":6,"endLine":6,"childNodes":[{"type":"ClassOrInterfaceType","startLine":6,"endLine":6,"childNodes":[{"type":"SimpleName","startLine":6,"endLine":6,"childNodes":[]}]}]},{"type":"SimpleName","startLine":6,"endLine":6,"childNodes":[]}]},{"type":"VoidType","startLine":6,"endLine":6,"childNodes":[]},{"type":"BlockStmt","startLine":6,"endLine":14,"childNodes":[{"type":"ExpressionStmt","startLine":8,"endLine":8,"childNodes":[{"type":"VariableDeclarationExpr","startLine":8,"endLine":8,"childNodes":[{"type":"VariableDeclarator","startLine":8,"endLine":8,"childNodes":[{"type":"PrimitiveType","startLine":8,"endLine":8,"childNodes":[]},{"type":"SimpleName","startLine":8,"endLine":8,"childNodes":[]},{"type":"IntegerLiteralExpr12","startLine":8,"endLine":8,"childNodes":[]}]}]}]},{"type":"ExpressionStmt","startLine":9,"endLine":9,"childNodes":[{"type":"VariableDeclarationExpr","startLine":9,"endLine":9,"childNodes":[{"type":"VariableDeclarator","startLine":9,"endLine":9,"childNodes":[{"type":"ArrayType","startLine":9,"endLine":9,"childNodes":[{"type":"PrimitiveType","startLine":9,"endLine":9,"childNodes":[]}]},{"type":"SimpleName","startLine":9,"endLine":9,"childNodes":[]},{"type":"ArrayInitializerExpr","startLine":9,"endLine":9,"childNodes":[{"type":"IntegerLiteralExpr2","startLine":9,"endLine":9,"childNodes":[]},{"type":"IntegerLiteralExpr4","startLine":9,"endLine":9,"childNodes":[]},{"type":"IntegerLiteralExpr5","startLine":9,"endLine":9,"childNodes":[]}]}]}]}]},{"type":"ExpressionStmt","startLine":11,"endLine":11,"childNodes":[{"type":"MethodCallExpr","startLine":11,"endLine":11,"childNodes":[{"type":"FieldAccessExpr","startLine":11,"endLine":11,"childNodes":[{"type":"NameExpr","startLine":11,"endLine":11,"childNodes":[{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]}]},{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]}]},{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]},{"type":"BinaryExpr+","startLine":11,"endLine":11,"childNodes":[{"type":"BinaryExpr+","startLine":11,"endLine":11,"childNodes":[{"type":"BinaryExpr+","startLine":11,"endLine":11,"childNodes":[{"type":"StringLiteralExprNumber of combinations of getting change for ","startLine":11,"endLine":11,"childNodes":[]},{"type":"NameExpr","startLine":11,"endLine":11,"childNodes":[{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]}]}]},{"type":"StringLiteralExpr is: ","startLine":11,"endLine":11,"childNodes":[]}]},{"type":"MethodCallExpr","startLine":11,"endLine":11,"childNodes":[{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]},{"type":"NameExpr","startLine":11,"endLine":11,"childNodes":[{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]}]},{"type":"NameExpr","startLine":11,"endLine":11,"childNodes":[{"type":"SimpleName","startLine":11,"endLine":11,"childNodes":[]}]}]}]}]}]},{"type":"ExpressionStmt","startLine":12,"endLine":12,"childNodes":[{"type":"MethodCallExpr","startLine":12,"endLine":12,"childNodes":[{"type":"FieldAccessExpr","startLine":12,"endLine":12,"childNodes":[{"type":"NameExpr","startLine":12,"endLine":12,"childNodes":[{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]}]},{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]}]},{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]},{"type":"BinaryExpr+","startLine":12,"endLine":12,"childNodes":[{"type":"BinaryExpr+","startLine":12,"endLine":12,"childNodes":[{"type":"BinaryExpr+","startLine":12,"endLine":12,"childNodes":[{"type":"StringLiteralExprMinimum number of coins required for amount :","startLine":12,"endLine":12,"childNodes":[]},{"type":"NameExpr","startLine":12,"endLine":12,"childNodes":[{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]}]}]},{"type":"StringLiteralExpr is: ","startLine":12,"endLine":12,"childNodes":[]}]},{"type":"MethodCallExpr","startLine":12,"endLine":12,"childNodes":[{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]},{"type":"NameExpr","startLine":12,"endLine":12,"childNodes":[{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]}]},{"type":"NameExpr","startLine":12,"endLine":12,"childNodes":[{"type":"SimpleName","startLine":12,"endLine":12,"childNodes":[]}]}]}]}]}]}]}]},"processedContent":"public static void main(String[] VARIABLE_4) {\r\n    int VARIABLE_3 = 12;\r\n    int[] VARIABLE_2 = { 2, 4, 5 };\r\n    VARIABLE_1.out.println(\"Number of combinations of getting change for \" + VARIABLE_3 + \" is: \" + change(VARIABLE_2, VARIABLE_3));\r\n    VARIABLE_1.out.println(\"Minimum number of coins required for amount :\" + VARIABLE_3 + \" is: \" + minimumCoins(VARIABLE_2, VARIABLE_3));\r\n}","baseMethod":"public static void main(String[] args) {\r\n    int a = 12;\r\n    int[] arr = { 2, 4, 5 };\r\n    System.out.println(\"Number of combinations of getting change for \" + a + \" is: \" + change(arr, a));\r\n    System.out.println(\"Minimum number of coins required for amount :\" + a + \" is: \" + minimumCoins(arr, a));\r\n}","methodName":"main"},{"startLine":23,"endLine":37,"tree":{"type":"MethodDeclaration","startLine":23,"endLine":37,"childNodes":[{"type":"Modifier","startLine":23,"endLine":23,"childNodes":[]},{"type":"Modifier","startLine":23,"endLine":23,"childNodes":[]},{"type":"SimpleName","startLine":23,"endLine":23,"childNodes":[]},{"type":"Parameter","startLine":23,"endLine":23,"childNodes":[{"type":"ArrayType","startLine":23,"endLine":23,"childNodes":[{"type":"PrimitiveType","startLine":23,"endLine":23,"childNodes":[]}]},{"type":"SimpleName","startLine":23,"endLine":23,"childNodes":[]}]},{"type":"Parameter","startLine":23,"endLine":23,"childNodes":[{"type":"PrimitiveType","startLine":23,"endLine":23,"childNodes":[]},{"type":"SimpleName","startLine":23,"endLine":23,"childNodes":[]}]},{"type":"PrimitiveType","startLine":23,"endLine":23,"childNodes":[]},{"type":"BlockStmt","startLine":23,"endLine":37,"childNodes":[{"type":"ExpressionStmt","startLine":25,"endLine":25,"childNodes":[{"type":"VariableDeclarationExpr","startLine":25,"endLine":25,"childNodes":[{"type":"VariableDeclarator","startLine":25,"endLine":25,"childNodes":[{"type":"ArrayType","startLine":25,"endLine":25,"childNodes":[{"type":"PrimitiveType","startLine":25,"endLine":25,"childNodes":[]}]},{"type":"SimpleName","startLine":25,"endLine":25,"childNodes":[]},{"type":"ArrayCreationExpr","startLine":25,"endLine":25,"childNodes":[{"type":"PrimitiveType","startLine":25,"endLine":25,"childNodes":[]},{"type":"ArrayCreationLevel","startLine":25,"endLine":25,"childNodes":[{"type":"BinaryExpr+","startLine":25,"endLine":25,"childNodes":[{"type":"NameExpr","startLine":25,"endLine":25,"childNodes":[{"type":"SimpleName","startLine":25,"endLine":25,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":25,"endLine":25,"childNodes":[]}]}]}]}]}]}]},{"type":"ExpressionStmt","startLine":26,"endLine":26,"childNodes":[{"type":"AssignExpr","startLine":26,"endLine":26,"childNodes":[{"type":"ArrayAccessExpr","startLine":26,"endLine":26,"childNodes":[{"type":"NameExpr","startLine":26,"endLine":26,"childNodes":[{"type":"SimpleName","startLine":26,"endLine":26,"childNodes":[]}]},{"type":"IntegerLiteralExpr0","startLine":26,"endLine":26,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":26,"endLine":26,"childNodes":[]}]}]},{"type":"ForEachStmt","startLine":28,"endLine":34,"childNodes":[{"type":"VariableDeclarationExpr","startLine":28,"endLine":28,"childNodes":[{"type":"VariableDeclarator","startLine":28,"endLine":28,"childNodes":[{"type":"PrimitiveType","startLine":28,"endLine":28,"childNodes":[]},{"type":"SimpleName","startLine":28,"endLine":28,"childNodes":[]}]}]},{"type":"NameExpr","startLine":28,"endLine":28,"childNodes":[{"type":"SimpleName","startLine":28,"endLine":28,"childNodes":[]}]},{"type":"BlockStmt","startLine":28,"endLine":34,"childNodes":[{"type":"ForStmt","startLine":29,"endLine":31,"childNodes":[{"type":"VariableDeclarationExpr","startLine":29,"endLine":29,"childNodes":[{"type":"VariableDeclarator","startLine":29,"endLine":29,"childNodes":[{"type":"PrimitiveType","startLine":29,"endLine":29,"childNodes":[]},{"type":"SimpleName","startLine":29,"endLine":29,"childNodes":[]},{"type":"NameExpr","startLine":29,"endLine":29,"childNodes":[{"type":"SimpleName","startLine":29,"endLine":29,"childNodes":[]}]}]}]},{"type":"BinaryExpr<","startLine":29,"endLine":29,"childNodes":[{"type":"NameExpr","startLine":29,"endLine":29,"childNodes":[{"type":"SimpleName","startLine":29,"endLine":29,"childNodes":[]}]},{"type":"BinaryExpr+","startLine":29,"endLine":29,"childNodes":[{"type":"NameExpr","startLine":29,"endLine":29,"childNodes":[{"type":"SimpleName","startLine":29,"endLine":29,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":29,"endLine":29,"childNodes":[]}]}]},{"type":"UnaryExpr","startLine":29,"endLine":29,"childNodes":[{"type":"NameExpr","startLine":29,"endLine":29,"childNodes":[{"type":"SimpleName","startLine":29,"endLine":29,"childNodes":[]}]}]},{"type":"BlockStmt","startLine":29,"endLine":31,"childNodes":[{"type":"ExpressionStmt","startLine":30,"endLine":30,"childNodes":[{"type":"AssignExpr","startLine":30,"endLine":30,"childNodes":[{"type":"ArrayAccessExpr","startLine":30,"endLine":30,"childNodes":[{"type":"NameExpr","startLine":30,"endLine":30,"childNodes":[{"type":"SimpleName","startLine":30,"endLine":30,"childNodes":[]}]},{"type":"NameExpr","startLine":30,"endLine":30,"childNodes":[{"type":"SimpleName","startLine":30,"endLine":30,"childNodes":[]}]}]},{"type":"ArrayAccessExpr","startLine":30,"endLine":30,"childNodes":[{"type":"NameExpr","startLine":30,"endLine":30,"childNodes":[{"type":"SimpleName","startLine":30,"endLine":30,"childNodes":[]}]},{"type":"BinaryExpr-","startLine":30,"endLine":30,"childNodes":[{"type":"NameExpr","startLine":30,"endLine":30,"childNodes":[{"type":"SimpleName","startLine":30,"endLine":30,"childNodes":[]}]},{"type":"NameExpr","startLine":30,"endLine":30,"childNodes":[{"type":"SimpleName","startLine":30,"endLine":30,"childNodes":[]}]}]}]}]}]}]}]},{"type":"LineComment","startLine":32,"endLine":32,"childNodes":[]},{"type":"LineComment","startLine":33,"endLine":33,"childNodes":[]}]}]},{"type":"ReturnStmt","startLine":36,"endLine":36,"childNodes":[{"type":"ArrayAccessExpr","startLine":36,"endLine":36,"childNodes":[{"type":"NameExpr","startLine":36,"endLine":36,"childNodes":[{"type":"SimpleName","startLine":36,"endLine":36,"childNodes":[]}]},{"type":"NameExpr","startLine":36,"endLine":36,"childNodes":[{"type":"SimpleName","startLine":36,"endLine":36,"childNodes":[]}]}]}]}]}]},"processedContent":"/**\r\n * This method finds the number of combinations of getting change for a given amount and change coins\r\n *\r\n * @param coins  The list of coins\r\n * @param amount The amount for which we need to find the change\r\n *               Finds the number of combinations of change\r\n */\r\npublic static int change(int[] VARIABLE_5, int VARIABLE_4) {\r\n    int[] VARIABLE_3 = new int[VARIABLE_4 + 1];\r\n    VARIABLE_3[0] = 1;\r\n    for (int VARIABLE_2 : VARIABLE_5) {\r\n        for (int VARIABLE_1 = VARIABLE_2; VARIABLE_1 < VARIABLE_4 + 1; VARIABLE_1++) {\r\n            VARIABLE_3[VARIABLE_1] += VARIABLE_3[VARIABLE_1 - VARIABLE_2];\r\n        }\r\n    // Uncomment the below line to see the state of combinations for each coin\r\n    // printAmount(combinations);\r\n    }\r\n    return VARIABLE_3[VARIABLE_4];\r\n}","baseMethod":"/**\r\n * This method finds the number of combinations of getting change for a given amount and change coins\r\n *\r\n * @param coins  The list of coins\r\n * @param amount The amount for which we need to find the change\r\n *               Finds the number of combinations of change\r\n */\r\npublic static int change(int[] coins, int amount) {\r\n    int[] combinations = new int[amount + 1];\r\n    combinations[0] = 1;\r\n    for (int coin : coins) {\r\n        for (int i = coin; i < amount + 1; i++) {\r\n            combinations[i] += combinations[i - coin];\r\n        }\r\n    }\r\n    return combinations[amount];\r\n}","methodName":"change"},{"startLine":46,"endLine":67,"tree":{"type":"MethodDeclaration","startLine":46,"endLine":67,"childNodes":[{"type":"Modifier","startLine":46,"endLine":46,"childNodes":[]},{"type":"Modifier","startLine":46,"endLine":46,"childNodes":[]},{"type":"SimpleName","startLine":46,"endLine":46,"childNodes":[]},{"type":"Parameter","startLine":46,"endLine":46,"childNodes":[{"type":"ArrayType","startLine":46,"endLine":46,"childNodes":[{"type":"PrimitiveType","startLine":46,"endLine":46,"childNodes":[]}]},{"type":"SimpleName","startLine":46,"endLine":46,"childNodes":[]}]},{"type":"Parameter","startLine":46,"endLine":46,"childNodes":[{"type":"PrimitiveType","startLine":46,"endLine":46,"childNodes":[]},{"type":"SimpleName","startLine":46,"endLine":46,"childNodes":[]}]},{"type":"PrimitiveType","startLine":46,"endLine":46,"childNodes":[]},{"type":"BlockStmt","startLine":46,"endLine":67,"childNodes":[{"type":"ExpressionStmt","startLine":48,"endLine":48,"childNodes":[{"type":"VariableDeclarationExpr","startLine":48,"endLine":48,"childNodes":[{"type":"VariableDeclarator","startLine":48,"endLine":48,"childNodes":[{"type":"ArrayType","startLine":48,"endLine":48,"childNodes":[{"type":"PrimitiveType","startLine":48,"endLine":48,"childNodes":[]}]},{"type":"SimpleName","startLine":48,"endLine":48,"childNodes":[]},{"type":"ArrayCreationExpr","startLine":48,"endLine":48,"childNodes":[{"type":"PrimitiveType","startLine":48,"endLine":48,"childNodes":[]},{"type":"ArrayCreationLevel","startLine":48,"endLine":48,"childNodes":[{"type":"BinaryExpr+","startLine":48,"endLine":48,"childNodes":[{"type":"NameExpr","startLine":48,"endLine":48,"childNodes":[{"type":"SimpleName","startLine":48,"endLine":48,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":48,"endLine":48,"childNodes":[]}]}]}]}]}]}]},{"type":"ExpressionStmt","startLine":50,"endLine":50,"childNodes":[{"type":"AssignExpr","startLine":50,"endLine":50,"childNodes":[{"type":"ArrayAccessExpr","startLine":50,"endLine":50,"childNodes":[{"type":"NameExpr","startLine":50,"endLine":50,"childNodes":[{"type":"SimpleName","startLine":50,"endLine":50,"childNodes":[]}]},{"type":"IntegerLiteralExpr0","startLine":50,"endLine":50,"childNodes":[]}]},{"type":"IntegerLiteralExpr0","startLine":50,"endLine":50,"childNodes":[]}]}]},{"type":"ForStmt","startLine":52,"endLine":54,"childNodes":[{"type":"VariableDeclarationExpr","startLine":52,"endLine":52,"childNodes":[{"type":"VariableDeclarator","startLine":52,"endLine":52,"childNodes":[{"type":"PrimitiveType","startLine":52,"endLine":52,"childNodes":[]},{"type":"SimpleName","startLine":52,"endLine":52,"childNodes":[]},{"type":"IntegerLiteralExpr1","startLine":52,"endLine":52,"childNodes":[]}]}]},{"type":"BinaryExpr<=","startLine":52,"endLine":52,"childNodes":[{"type":"NameExpr","startLine":52,"endLine":52,"childNodes":[{"type":"SimpleName","startLine":52,"endLine":52,"childNodes":[]}]},{"type":"NameExpr","startLine":52,"endLine":52,"childNodes":[{"type":"SimpleName","startLine":52,"endLine":52,"childNodes":[]}]}]},{"type":"UnaryExpr","startLine":52,"endLine":52,"childNodes":[{"type":"NameExpr","startLine":52,"endLine":52,"childNodes":[{"type":"SimpleName","startLine":52,"endLine":52,"childNodes":[]}]}]},{"type":"BlockStmt","startLine":52,"endLine":54,"childNodes":[{"type":"ExpressionStmt","startLine":53,"endLine":53,"childNodes":[{"type":"AssignExpr","startLine":53,"endLine":53,"childNodes":[{"type":"ArrayAccessExpr","startLine":53,"endLine":53,"childNodes":[{"type":"NameExpr","startLine":53,"endLine":53,"childNodes":[{"type":"SimpleName","startLine":53,"endLine":53,"childNodes":[]}]},{"type":"NameExpr","startLine":53,"endLine":53,"childNodes":[{"type":"SimpleName","startLine":53,"endLine":53,"childNodes":[]}]}]},{"type":"FieldAccessExpr","startLine":53,"endLine":53,"childNodes":[{"type":"NameExpr","startLine":53,"endLine":53,"childNodes":[{"type":"SimpleName","startLine":53,"endLine":53,"childNodes":[]}]},{"type":"SimpleName","startLine":53,"endLine":53,"childNodes":[]}]}]}]}]}]},{"type":"ForStmt","startLine":55,"endLine":63,"childNodes":[{"type":"VariableDeclarationExpr","startLine":55,"endLine":55,"childNodes":[{"type":"VariableDeclarator","startLine":55,"endLine":55,"childNodes":[{"type":"PrimitiveType","startLine":55,"endLine":55,"childNodes":[]},{"type":"SimpleName","startLine":55,"endLine":55,"childNodes":[]},{"type":"IntegerLiteralExpr1","startLine":55,"endLine":55,"childNodes":[]}]}]},{"type":"BinaryExpr<=","startLine":55,"endLine":55,"childNodes":[{"type":"NameExpr","startLine":55,"endLine":55,"childNodes":[{"type":"SimpleName","startLine":55,"endLine":55,"childNodes":[]}]},{"type":"NameExpr","startLine":55,"endLine":55,"childNodes":[{"type":"SimpleName","startLine":55,"endLine":55,"childNodes":[]}]}]},{"type":"UnaryExpr","startLine":55,"endLine":55,"childNodes":[{"type":"NameExpr","startLine":55,"endLine":55,"childNodes":[{"type":"SimpleName","startLine":55,"endLine":55,"childNodes":[]}]}]},{"type":"BlockStmt","startLine":55,"endLine":63,"childNodes":[{"type":"ForEachStmt","startLine":56,"endLine":62,"childNodes":[{"type":"VariableDeclarationExpr","startLine":56,"endLine":56,"childNodes":[{"type":"VariableDeclarator","startLine":56,"endLine":56,"childNodes":[{"type":"PrimitiveType","startLine":56,"endLine":56,"childNodes":[]},{"type":"SimpleName","startLine":56,"endLine":56,"childNodes":[]}]}]},{"type":"NameExpr","startLine":56,"endLine":56,"childNodes":[{"type":"SimpleName","startLine":56,"endLine":56,"childNodes":[]}]},{"type":"BlockStmt","startLine":56,"endLine":62,"childNodes":[{"type":"IfStmt","startLine":57,"endLine":61,"childNodes":[{"type":"BinaryExpr<=","startLine":57,"endLine":57,"childNodes":[{"type":"NameExpr","startLine":57,"endLine":57,"childNodes":[{"type":"SimpleName","startLine":57,"endLine":57,"childNodes":[]}]},{"type":"NameExpr","startLine":57,"endLine":57,"childNodes":[{"type":"SimpleName","startLine":57,"endLine":57,"childNodes":[]}]}]},{"type":"BlockStmt","startLine":57,"endLine":61,"childNodes":[{"type":"ExpressionStmt","startLine":58,"endLine":58,"childNodes":[{"type":"VariableDeclarationExpr","startLine":58,"endLine":58,"childNodes":[{"type":"VariableDeclarator","startLine":58,"endLine":58,"childNodes":[{"type":"PrimitiveType","startLine":58,"endLine":58,"childNodes":[]},{"type":"SimpleName","startLine":58,"endLine":58,"childNodes":[]},{"type":"ArrayAccessExpr","startLine":58,"endLine":58,"childNodes":[{"type":"NameExpr","startLine":58,"endLine":58,"childNodes":[{"type":"SimpleName","startLine":58,"endLine":58,"childNodes":[]}]},{"type":"BinaryExpr-","startLine":58,"endLine":58,"childNodes":[{"type":"NameExpr","startLine":58,"endLine":58,"childNodes":[{"type":"SimpleName","startLine":58,"endLine":58,"childNodes":[]}]},{"type":"NameExpr","startLine":58,"endLine":58,"childNodes":[{"type":"SimpleName","startLine":58,"endLine":58,"childNodes":[]}]}]}]}]}]}]},{"type":"IfStmt","startLine":59,"endLine":60,"childNodes":[{"type":"BinaryExpr&&","startLine":59,"endLine":59,"childNodes":[{"type":"BinaryExpr!=","startLine":59,"endLine":59,"childNodes":[{"type":"NameExpr","startLine":59,"endLine":59,"childNodes":[{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]},{"type":"FieldAccessExpr","startLine":59,"endLine":59,"childNodes":[{"type":"NameExpr","startLine":59,"endLine":59,"childNodes":[{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]},{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]}]},{"type":"BinaryExpr<","startLine":59,"endLine":59,"childNodes":[{"type":"BinaryExpr+","startLine":59,"endLine":59,"childNodes":[{"type":"NameExpr","startLine":59,"endLine":59,"childNodes":[{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":59,"endLine":59,"childNodes":[]}]},{"type":"ArrayAccessExpr","startLine":59,"endLine":59,"childNodes":[{"type":"NameExpr","startLine":59,"endLine":59,"childNodes":[{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]},{"type":"NameExpr","startLine":59,"endLine":59,"childNodes":[{"type":"SimpleName","startLine":59,"endLine":59,"childNodes":[]}]}]}]}]},{"type":"ExpressionStmt","startLine":60,"endLine":60,"childNodes":[{"type":"AssignExpr","startLine":60,"endLine":60,"childNodes":[{"type":"ArrayAccessExpr","startLine":60,"endLine":60,"childNodes":[{"type":"NameExpr","startLine":60,"endLine":60,"childNodes":[{"type":"SimpleName","startLine":60,"endLine":60,"childNodes":[]}]},{"type":"NameExpr","startLine":60,"endLine":60,"childNodes":[{"type":"SimpleName","startLine":60,"endLine":60,"childNodes":[]}]}]},{"type":"BinaryExpr+","startLine":60,"endLine":60,"childNodes":[{"type":"NameExpr","startLine":60,"endLine":60,"childNodes":[{"type":"SimpleName","startLine":60,"endLine":60,"childNodes":[]}]},{"type":"IntegerLiteralExpr1","startLine":60,"endLine":60,"childNodes":[]}]}]}]}]}]}]}]}]}]}]},{"type":"ReturnStmt","startLine":66,"endLine":66,"childNodes":[{"type":"ArrayAccessExpr","startLine":66,"endLine":66,"childNodes":[{"type":"NameExpr","startLine":66,"endLine":66,"childNodes":[{"type":"SimpleName","startLine":66,"endLine":66,"childNodes":[]}]},{"type":"NameExpr","startLine":66,"endLine":66,"childNodes":[{"type":"SimpleName","startLine":66,"endLine":66,"childNodes":[]}]}]}]},{"type":"LineComment","startLine":64,"endLine":64,"childNodes":[]}]}]},"processedContent":"/**\r\n * This method finds the minimum number of coins needed for a given amount.\r\n *\r\n * @param coins  The list of coins\r\n * @param amount The amount for which we need to find the minimum number of coins.\r\n *               Finds the the minimum number of coins that make a given value.\r\n */\r\npublic static int minimumCoins(int[] VARIABLE_8, int VARIABLE_7) {\r\n    // minimumCoins[i] will store the minimum coins needed for amount i\r\n    int[] VARIABLE_6 = new int[VARIABLE_7 + 1];\r\n    VARIABLE_6[0] = 0;\r\n    for (int VARIABLE_5 = 1; VARIABLE_5 <= VARIABLE_7; VARIABLE_5++) {\r\n        VARIABLE_6[VARIABLE_5] = VARIABLE_4.MAX_VALUE;\r\n    }\r\n    for (int VARIABLE_3 = 1; VARIABLE_3 <= VARIABLE_7; VARIABLE_3++) {\r\n        for (int VARIABLE_2 : VARIABLE_8) {\r\n            if (VARIABLE_2 <= VARIABLE_3) {\r\n                int VARIABLE_1 = VARIABLE_6[VARIABLE_3 - VARIABLE_2];\r\n                if (VARIABLE_1 != VARIABLE_4.MAX_VALUE && VARIABLE_1 + 1 < VARIABLE_6[VARIABLE_3])\r\n                    VARIABLE_6[VARIABLE_3] = VARIABLE_1 + 1;\r\n            }\r\n        }\r\n    }\r\n    // printAmount(minimumCoins);\r\n    return VARIABLE_6[VARIABLE_7];\r\n}","baseMethod":"/**\r\n * This method finds the minimum number of coins needed for a given amount.\r\n *\r\n * @param coins  The list of coins\r\n * @param amount The amount for which we need to find the minimum number of coins.\r\n *               Finds the the minimum number of coins that make a given value.\r\n */\r\npublic static int minimumCoins(int[] coins, int amount) {\r\n    // minimumCoins[i] will store the minimum coins needed for amount i\r\n    int[] minimumCoins = new int[amount + 1];\r\n    minimumCoins[0] = 0;\r\n    for (int i = 1; i <= amount; i++) {\r\n        minimumCoins[i] = Integer.MAX_VALUE;\r\n    }\r\n    for (int i = 1; i <= amount; i++) {\r\n        for (int coin : coins) {\r\n            if (coin <= i) {\r\n                int sub_res = minimumCoins[i - coin];\r\n                if (sub_res != Integer.MAX_VALUE && sub_res + 1 < minimumCoins[i])\r\n                    minimumCoins[i] = sub_res + 1;\r\n            }\r\n        }\r\n    }\r\n    // printAmount(minimumCoins);\r\n    return minimumCoins[amount];\r\n}","methodName":"minimumCoins"},{"startLine":70,"endLine":75,"tree":{"type":"MethodDeclaration","startLine":70,"endLine":75,"childNodes":[{"type":"Modifier","startLine":70,"endLine":70,"childNodes":[]},{"type":"Modifier","startLine":70,"endLine":70,"childNodes":[]},{"type":"SimpleName","startLine":70,"endLine":70,"childNodes":[]},{"type":"Parameter","startLine":70,"endLine":70,"childNodes":[{"type":"ArrayType","startLine":70,"endLine":70,"childNodes":[{"type":"PrimitiveType","startLine":70,"endLine":70,"childNodes":[]}]},{"type":"SimpleName","startLine":70,"endLine":70,"childNodes":[]}]},{"type":"VoidType","startLine":70,"endLine":70,"childNodes":[]},{"type":"BlockStmt","startLine":70,"endLine":75,"childNodes":[{"type":"ForStmt","startLine":71,"endLine":73,"childNodes":[{"type":"VariableDeclarationExpr","startLine":71,"endLine":71,"childNodes":[{"type":"VariableDeclarator","startLine":71,"endLine":71,"childNodes":[{"type":"PrimitiveType","startLine":71,"endLine":71,"childNodes":[]},{"type":"SimpleName","startLine":71,"endLine":71,"childNodes":[]},{"type":"IntegerLiteralExpr0","startLine":71,"endLine":71,"childNodes":[]}]}]},{"type":"BinaryExpr<","startLine":71,"endLine":71,"childNodes":[{"type":"NameExpr","startLine":71,"endLine":71,"childNodes":[{"type":"SimpleName","startLine":71,"endLine":71,"childNodes":[]}]},{"type":"FieldAccessExpr","startLine":71,"endLine":71,"childNodes":[{"type":"NameExpr","startLine":71,"endLine":71,"childNodes":[{"type":"SimpleName","startLine":71,"endLine":71,"childNodes":[]}]},{"type":"SimpleName","startLine":71,"endLine":71,"childNodes":[]}]}]},{"type":"UnaryExpr","startLine":71,"endLine":71,"childNodes":[{"type":"NameExpr","startLine":71,"endLine":71,"childNodes":[{"type":"SimpleName","startLine":71,"endLine":71,"childNodes":[]}]}]},{"type":"BlockStmt","startLine":71,"endLine":73,"childNodes":[{"type":"ExpressionStmt","startLine":72,"endLine":72,"childNodes":[{"type":"MethodCallExpr","startLine":72,"endLine":72,"childNodes":[{"type":"FieldAccessExpr","startLine":72,"endLine":72,"childNodes":[{"type":"NameExpr","startLine":72,"endLine":72,"childNodes":[{"type":"SimpleName","startLine":72,"endLine":72,"childNodes":[]}]},{"type":"SimpleName","startLine":72,"endLine":72,"childNodes":[]}]},{"type":"SimpleName","startLine":72,"endLine":72,"childNodes":[]},{"type":"BinaryExpr+","startLine":72,"endLine":72,"childNodes":[{"type":"ArrayAccessExpr","startLine":72,"endLine":72,"childNodes":[{"type":"NameExpr","startLine":72,"endLine":72,"childNodes":[{"type":"SimpleName","startLine":72,"endLine":72,"childNodes":[]}]},{"type":"NameExpr","startLine":72,"endLine":72,"childNodes":[{"type":"SimpleName","startLine":72,"endLine":72,"childNodes":[]}]}]},{"type":"StringLiteralExpr ","startLine":72,"endLine":72,"childNodes":[]}]}]}]}]}]},{"type":"ExpressionStmt","startLine":74,"endLine":74,"childNodes":[{"type":"MethodCallExpr","startLine":74,"endLine":74,"childNodes":[{"type":"FieldAccessExpr","startLine":74,"endLine":74,"childNodes":[{"type":"NameExpr","startLine":74,"endLine":74,"childNodes":[{"type":"SimpleName","startLine":74,"endLine":74,"childNodes":[]}]},{"type":"SimpleName","startLine":74,"endLine":74,"childNodes":[]}]},{"type":"SimpleName","startLine":74,"endLine":74,"childNodes":[]}]}]}]}]},"processedContent":"// A basic print method which prints all the contents of the array\r\npublic static void printAmount(int[] VARIABLE_3) {\r\n    for (int VARIABLE_2 = 0; VARIABLE_2 < VARIABLE_3.length; VARIABLE_2++) {\r\n        VARIABLE_1.out.print(VARIABLE_3[VARIABLE_2] + \" \");\r\n    }\r\n    VARIABLE_1.out.println();\r\n}","baseMethod":"// A basic print method which prints all the contents of the array\r\npublic static void printAmount(int[] arr) {\r\n    for (int i = 0; i < arr.length; i++) {\r\n        System.out.print(arr[i] + \" \");\r\n    }\r\n    System.out.println();\r\n}","methodName":"printAmount"}]